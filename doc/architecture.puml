@startuml

class HTTPReply {
    + code: std::uint16_t;
    + body: std::string;
    + headers: std::unordered_map<std::string, std::string>;
}

class HTTPRequest {
    + uri: std::string;
    + method: std::string;
    + body: std::string;
    + queryOptions: std::unordered_map<std::string, std::string>;
    + headers: std::unordered_map<std::string, std::string>;
    + middlewareData: std::unordered_map<std::string, std::any>;
}

class PipelineConfig {
    + listenerPath: std::string;
    + parserPath: std::string;
    + senderPath: std::string;
    + modulesPaths: std::vector<std::string>;
}

interface IClient {
    + send(content: std::vector<std::byte> const &) const: void
    + receive(bytesToRead: std::size_t): std::vector<std::byte>
    + connect(ip: std::uint32_t, port: std::uint16_t): void
    + run(): void
    + getNativeHandle() const noexcept: socket_type
}

interface IListener {
    + using packetReceivedCallback = std::function<void (packet: std::vector<std::byte> &&, client: Client const &)>
    + listen(): void
    + stop(): void
    + onPacket(callback: packetReceivedCallback &&): void noexcept
}

interface IModule {
    + process(request: RequestDataType &, response: ResponseDataType &): void
}

interface IPacketParser<RequestDataType> {
    + parse(rawRequest: std::vector<std::byte> const &): RequestDataType
}

interface IPipelineManager {
    + listen(): void
    + stop(): void
    + loadConfig(): void
    + configurePipeline(PipelineConfig const &config): void
}

interface IReplySender {
    + send(reply: ResponseDataType const &, client: Client const &): void
}

@enduml
